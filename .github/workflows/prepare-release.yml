name: Prepare Release

on:
  pull_request:
    types: [opened, reopened]
    branches:
      - main
  push:
    branches:
      - "release/**"
      - "hotfix/**"

env:
  NODE_VERSION: "18.x"

permissions: write-all

jobs:
  prepare-artifacts:
    name: Prepare Artifacts
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL }}
      PRE_RELEASE_TAG: ${{ vars.PRE_RELEASE_TAG }}
      AUTOMATION_USER_NAME: ${{ vars.AUTOMATION_USER_NAME }}
      AUTOMATION_USER_EMAIL: ${{ vars.AUTOMATION_USER_EMAIL }}

    outputs:
      tag-name: ${{ steps.prepare-release.outputs.TAG_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install packages
        run: npm install

      - name: Run tests
        run: npm run test-all

      - name: Setup git user
        run: |
          git config user.name ${{ env.AUTOMATION_USER_NAME }}
          git config user.email ${{ env.AUTOMATION_USER_EMAIL }}

      - name: Prepare tag or release
        id: prepare-release
        run: |
          echo "TAG_NAME=$(npm run release | grep v)" >> $GITHUB_OUTPUT

      - name: Set output as environment variable
        run: echo "TAG_NAME=${{ steps.prepare-release.outputs.TAG_NAME }}" >> $GITHUB_ENV

      - name: Get genereated package name
        if: contains(steps.prepare-release.outputs.TAG_NAME, 'release')
        id: generated-pkg-name
        run: echo "PKG_FILE=$(ls *.tgz)" >> $GITHUB_OUTPUT

      - name: Upload artifacts to release job
        if: contains(steps.prepare-release.outputs.TAG_NAME, 'release')
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: |
            release-notes.md
            ${{ steps.generated-pkg-name.outputs.PKG_FILE }}

  set-variables:
    name: Set Variables
    runs-on: ubuntu-latest
    needs: prepare-artifacts
    env:
      TAG_NAME: ${{needs.prepare-artifacts.outputs.tag-name}}
    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Identifying tag name to be used
        run: |
          if [[ -n "$TAG_NAME" ]]; then
            echo "We got $TAG_NAME as TAG_NAME from the previous job."
          else
            echo "No tag name was received from the previous job"
          fi

      - name: Set PENDING_TAG Variable
        uses: mmoyaferrer/set-github-variable@v1.0.0
        with:
          name: "PENDING_TAG"
          value: ${{ env.TAG_NAME }}
          repository: programad/ritest
          token: ${{ secrets.GH_ACTIONS }}

      - name: Set PENDING_RELEASE_RUN_ID
        uses: mmoyaferrer/set-github-variable@v1.0.0
        with:
          name: "PENDING_RELEASE_RUN_ID"
          value: ${{ github.run_id }}
          repository: programad/ritest
          token: ${{ secrets.GH_ACTIONS }}
